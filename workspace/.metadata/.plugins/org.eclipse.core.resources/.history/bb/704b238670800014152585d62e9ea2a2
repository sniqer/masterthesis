package lteAnalyzer;

import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

public class OptimumAnalyzer extends Calculate {

public static double[][] graph2DoubleMatrix(XYSeriesCollection graph){
	double[][] outArray = new double[graph.getSeries().size()][];
	for(int i = 0; i < graph.getSeries().size(); i++){
		XYSeries serie = graph.getSeries(i); 
		outArray[i] = new double[serie.getItemCount()];
		for(int k = 0; k < serie.getItemCount(); k++){
			outArray[i][k] = (double) serie.getY(k);

		}
		
	}
	//Print.array2D(outArray);
	return outArray;
}
	
public static double[] sumValsInGraph(XYSeriesCollection graph){
	double[][] graphData = graph2DoubleMatrix(graph);
	double[] outputSum = new double[graphData.length];
	
	for(int i = 0; i<graphData[0].length;i++){
		for(int j = 0;j<graphData.length;j++){
			if(graphData[j][i] != NOT_A_VALUE)
				outputSum[j] += graphData[j][i];
		}
	}
	System.out.println("blurk2");
	Print.array(outputSum);
	return outputSum;
}

public static double[][] optimumForEachPoint(XYSeriesCollection graph){
	double[][] graphData = graph2DoubleMatrix(graph);
	double[][] outputSum = new double[graphData[0].length][2];
	graphData=transpose(graphData);
	for(int i=0;i<graphData.length;i++){
		outputSum[i] = maxValWithIndex(graphData[i]);
	}
	System.out.println("blurk");
	Print.array2D(outputSum);
	return outputSum;
}




public static double[][] transpose(double[][] stringArr){
	
	double[][] output = new double[stringArr[0].length][stringArr.length];
	for(int i=0;i<stringArr.length;i++){
		for(int j=0;j<stringArr[0].length;j++){
			output[j][i] = stringArr[i][j];
		}
	}
	return output;
}

public static double[] maxValWithIndex(double[] graphColumn){
	double[] maxWithIndex = {graphColumn[0], 0};
	
	for(int i=0;i<graphColumn.length;i++){
		if(graphColumn[i] > maxWithIndex[0]){
			maxWithIndex[0] = graphColumn[i];
			maxWithIndex[1] = i;
		}
	}
	return maxWithIndex;
}
}
