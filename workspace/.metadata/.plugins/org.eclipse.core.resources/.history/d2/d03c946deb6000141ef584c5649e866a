package lteAnalyzer;

import java.util.HashMap;

public class Calculate{
	
	//dl
	static final int NOT_A_VALUE = -1337; //empty spaces in a vector is represented by this value
	static final int NR_OF_CQI_VALS = 16; //0 to 15
	static final int NR_OF_MCS_VALS = 29;
	static final int MAX_MCS_VAL = 28;
	static final int MIN_NR_OF_FOUND_XAXIS_VALS = 50;
	
	//ul
	static final int NR_OF_SINR_VALS = 66; //-25 to 40
	static final int NR_OF_UL_MCS_VALS = 23; // 0 to 22
	static final int MAX_UL_MCS_VAL = 22;
	static final int MIN_SINR_VAL = -25;
	
	
	
	public static double[][] avgTBSPerSecond(int[] tbs, double[] timeStamps, int[] SIB, int granularity){

		int logFileCounter = 0;
		int averageCounter = 0;
		
		int averageValue = 0;
		int sum = 0;
		int timeStampIndex = 0;
		int currentTbsValue;
		double currentTimeStamp = 0;
		
		double[][] outputArray = new double[2][tbs.length/granularity + 1];

		while(logFileCounter < tbs.length)
		{
			currentTbsValue = tbs[logFileCounter]; 
			if(currentTbsValue != NOT_A_VALUE && SIB[logFileCounter] != -1){
				sum += currentTbsValue;
				++averageCounter;
				
				if(averageCounter == granularity){
					averageValue = sum / granularity;
					currentTimeStamp = timeStamps[logFileCounter];
					
					//put values in output array
					outputArray[0][timeStampIndex] = averageValue;
					outputArray[1][timeStampIndex] = BasicCalc.findCloseValFrInd(timeStamps, logFileCounter);
					++timeStampIndex;
					averageCounter = 0;
				}
			}
			++logFileCounter;
		}
		return outputArray;
	}
	
	
	public static double[][] avgTbsPerSecondOld(int[] tbs, double[] timeStamps, int[] SIB,int granularity){
		int lol;
		
		int timeStamp_ind = 0;
		int avgTbsSum_ind = 1;
		
		int outputindex = 0;
		int logFileIndex = 0;
		int averageCounter=0;
		
		lol = BasicCalc.numberOfVals(tbs);
		System.out.println(lol);
		lol=lol/granularity;
		
		double[][] out = new double[2][lol+1];
		double avgTbsSum = 0;
		
		while(outputindex < out.length){
			
			while(averageCounter <= granularity){
				System.out.println(logFileIndex + " " + tbs.length);
				if(tbs[logFileIndex] != NOT_A_VALUE && SIB[logFileIndex] != -1){
					avgTbsSum = avgTbsSum + (double) tbs[logFileIndex];
					averageCounter++;
				}
				logFileIndex++;
			}
			averageCounter=0;
			avgTbsSum = avgTbsSum/granularity;
			out[timeStamp_ind][outputindex] = BasicCalc.findCloseValFrInd(timeStamps, logFileIndex);
			out[avgTbsSum_ind][outputindex] = avgTbsSum;
			//System.out.println("lägger in data " + out[timeStamp_ind][outputindex] + " " + out[avgTbsSum_ind][outputindex]);
			outputindex++;
			
		}
		Print.array(out[0]);
		return out;
	}
	
	
}

