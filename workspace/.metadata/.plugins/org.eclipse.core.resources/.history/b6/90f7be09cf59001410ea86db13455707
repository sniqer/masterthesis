package lteAnalyzer;

public class Calculate {

	
	
	
	public static float[] maxBpsPerSINR(int[] tbs,int[] sinr,int[] SIB){
		
		//indexes
		
		//values from the inputarrays
		int currentsinr = 0;
		float currentMaxTbs = 0;
		
		float[]	maxBpsPerSINR = new float[45];
		maxBpsPerSINR = init(maxBpsPerSINR);
		
		
		for(int i=0;i<sinr.length;i++){
			
			//we've found legit tbs data, accumulate counter, tbs, bW and see if we have peak data rate.
			currentMaxTbs = Math.max((float) (tbs[i]/1000), currentMaxTbs);
			

			if (currentsinr != sinr[i] && sinr[i] != -1337){
				//System.out.println( " currentMaxTBS: " + currentMaxTbs);
				maxBpsPerSINR[sinr[i]+15] = Math.max(maxBpsPerSINR[sinr[i]+15], currentMaxTbs); //accumulated tbs

				//reset values
				currentsinr = sinr[i];
				currentMaxTbs = 0;
			}
		}
		Print.array(maxBpsPerSINR);
		return maxBpsPerSINR;
	}
	
	
	
	public static float[] avgBpsPerHzPerSINR(int[] tbs,int[] prb,int[] sinr,int[] SIB){
		
		//indexes
		int currentTbs_ind = 0;
		int currentPrb_ind = 1;

		
		//values from the inputarrays
		
		int currentsinr = 0;
		int currentTbs = 0;
		int currentPrb = 0;
		
		int[][] tempTbsSINR = new int [45][2]; 
		tempTbsSINR = init(tempTbsSINR);
		
		float[]	bpsPerHzPerSINR = new float [45];
		bpsPerHzPerSINR = init(bpsPerHzPerSINR);
		
		
		for(int i=0;i<sinr.length;i++){
			//we've found legit tbs data, accumulate counter, tbs, bW and see if we have peak data rate.
			if(SIB[i] != -1 && tbs[i] != -1337){
				//System.out.println( "foundTBS: " + tbs[i] + " foundPRB: " + findCloseValFrInd(prb,i));
				currentTbs=currentTbs+tbs[i]; 
				currentPrb=findCloseValFrInd(prb,i)+currentPrb;
			}
			

			//acumulate the legit bandwidth and tbs and put it in TBS_SINR_BW on the sinr index.
			if (currentsinr != sinr[i] && sinr[i] != -1337){
				 
				//System.out.println( " currentTBS: " + currentTbs + " currentPRB: " + currentPrb);
				tempTbsSINR[sinr[i]+15][currentTbs_ind] = tempTbsSINR[sinr[i]+15][currentTbs_ind]+currentTbs; //accumulated Counter
				tempTbsSINR[sinr[i]+15][currentPrb_ind] = tempTbsSINR[sinr[i]+15][currentPrb_ind]+currentPrb; //accumulated tbs

				//reset values
				currentsinr = sinr[i];
				currentPrb = 0;
				currentTbs = 0;
			}
		}
		
		//calculate the average throughput/SINR and throughput/SINR/Hz
		for (int j=0;j<tempTbsSINR.length;j++){ 
			//System.out.println("kommer hit");
			if(tempTbsSINR[j][currentPrb_ind] != 0 && tempTbsSINR[j][currentTbs_ind] != 0){ //index mustn't be 0, division by zero error
				//System.out.println( " currentTBS: " +  tempTbsSINR[j][currentTbs_ind]  + " currentPRB: " +  tempTbsSINR[j][currentPrb_ind] );
				bpsPerHzPerSINR[j] = ((float) tempTbsSINR[j][currentTbs_ind]/tempTbsSINR[j][currentPrb_ind]/180);//divide by thousand, we get Mbits/s/SINR
			}
		}
		Print.array(bpsPerHzPerSINR);
		return bpsPerHzPerSINR;
	}
	
	
	public static float[] maxBpsPerHzPerSINR(int[] tbs,int[] prb,int[] sinr,int[] SIB){
		
		//values from the inputarrays
		int currentsinr = 0;
		float currentTbs = 0;
		float currentPrb = 0;
		
		float[]	maxBpsPerSINR = new float[45];
		maxBpsPerSINR = init(maxBpsPerSINR);
		
		
		for(int i=0;i<sinr.length;i++){
			
			if(SIB[i] != -1 && tbs[i] != -1337){
				//System.out.println( "foundTBS: " + tbs[i] + " foundPRB: " + findCloseValFrInd(prb,i));
				currentTbs=currentTbs+tbs[i]; 
				currentPrb=findCloseValFrInd(prb,i)+currentPrb;
			}
			

			if (currentsinr != sinr[i] && sinr[i] != -1337){
				//System.out.println( " currentMaxTBS: " + currentMaxTbs);
				maxBpsPerSINR[sinr[i]+15] = Math.max(maxBpsPerSINR[sinr[i]+15], currentTbs/currentPrb/180); //accumulated tbs

				//reset values
				currentsinr = sinr[i];
				currentTbs = 0;
				currentPrb = 0;
			}
		}
		Print.array(maxBpsPerSINR);
		return maxBpsPerSINR;
	}
	
	
	

	
	//behövs nog ej?
	public static float[] blerPerSINR(int[] acksNnacks,int[] sinr){
		int currentsinr = -1000; //dummydefault value
		int currentAcks = 0;
		int ackCounter = 0;
		int currentBler_ind = 0;
		int blerCounter_ind = 1;
		
		float[][] tempBler = new float[2][45];
		tempBler = init(tempBler);
		
		float[] bler = new float[45];
		bler = init(bler);
		Print.array(acksNnacks);
		for(int i=0;i<sinr.length;i++){
			
			if(acksNnacks[i] != -1337){
				currentAcks = currentAcks + acksNnacks[i];
				ackCounter = ackCounter + 2;
			}
			
			if (currentsinr != sinr[i] && sinr[i] != -1337){
				//System.out.println( " currentCqi: " + tempCqiPerSINR[currentCqi_ind][sinr[i]+15]+ " counter: " + tempCqiPerSINR[cqiCounter_ind][sinr[i]+15]);
				tempBler[currentBler_ind][sinr[i]+15] = tempBler[currentBler_ind][sinr[i]+15] + currentAcks; //accumulated cqi
				tempBler[blerCounter_ind][sinr[i]+15] = tempBler[blerCounter_ind][sinr[i]+15] + ackCounter;
				
				//reset values
				currentsinr = sinr[i];
			}
		}
		for(int j=0;j<bler.length;j++){
			if (tempBler[currentBler_ind][j] != 0 && tempBler[blerCounter_ind][j] != 0 )
				bler[j] =1-tempBler[currentBler_ind][j]/tempBler[blerCounter_ind][j];
		}
			Print.array(bler);
			return bler;
		}
	
	
	
	public static float[] avgValPerSINR(int[] val, int[] sinr, int[] SIB){
		
		int value_ind = 0;
		int counter_ind = 1;
		
		int currentsinr = -1000; //dummydefault value
		int counter = 0;
		int currentVal = 0;
		
		float[][] tempValPerSINR = new float[2][45];
		tempValPerSINR = init(tempValPerSINR);
		
		float[] valPerSINR = new float[45];
		valPerSINR = init(valPerSINR);
		
		for(int i=0;i<sinr.length;i++){
			

				//we've found legit tbs data, accumulate counter, tbs, bW and see if we have peak data rate.
				if(SIB[i] != -1 && val[i] != -1337){
					currentVal=currentVal+val[i]; 
					counter++;
				}
			
			if (currentsinr != sinr[i] && sinr[i] != -1337 && SIB[i] != -1){
				//System.out.println( " currentCqi: " + tempCqiPerSINR[currentCqi_ind][sinr[i]+15]+ " counter: " + tempCqiPerSINR[cqiCounter_ind][sinr[i]+15]);
				tempValPerSINR[value_ind][sinr[i]+15] = tempValPerSINR[value_ind][sinr[i]+15] + currentVal; //accumulated cqi
				tempValPerSINR[counter_ind][sinr[i]+15] = tempValPerSINR[counter_ind][sinr[i]+15] + counter;
				
				//reset values
				currentsinr = sinr[i];
				counter=0;
				currentVal=0;
				
			}
		}
		for(int j=0;j<valPerSINR.length;j++){
			if (tempValPerSINR[counter_ind][j] != 0 )
				valPerSINR[j] = tempValPerSINR[value_ind][j]/tempValPerSINR[counter_ind][j];
		}
			Print.array(valPerSINR);
			return valPerSINR;
	}
	
	public static float[] avgSINRPerMcs(int[] mcs,int[] sinr, int[] SIB, String ULorDL){
		
		//indexes
		int counter_ind = 0;
		int currentSinr_ind = 1;

		
		//values from the inputarrays
		int counter = 0;
		int currentSinr = 0;
		int currentMcs = 0;
		
		int[][] tempSinrPerMcs = null;
		float[]	sinrPerMcs = null;
		
		if(ULorDL == "DL"){
			tempSinrPerMcs = new int [29][2];
			sinrPerMcs = new float[29];
		}
		
		if(ULorDL == "UL"){
			tempSinrPerMcs = new int [24][2];
			sinrPerMcs = new float[24];
		}

		
		tempSinrPerMcs = init(tempSinrPerMcs);
		sinrPerMcs = init(sinrPerMcs);
		
		
		for(int i=0;i<sinr.length;i++){
			//we've found legit Prb data, accumulate counter, Prb, bW and see if we have peak data rate.
			if(SIB[i] != -1 && sinr[i] != -1337){
				currentSinr=currentSinr+sinr[i]; 
				counter++;
			}

			if (currentMcs != mcs[i] && mcs[i] != -1337 && SIB[i] != -1){
				//System.out.println(mcs[i]);
				System.out.println( " mcs: " + mcs[i] + " current sinr: " + currentSinr + " counter: " + counter);
				tempSinrPerMcs[mcs[i]][counter_ind] = tempSinrPerMcs[mcs[i]][counter_ind]+counter; //accumulated Counter
				tempSinrPerMcs[mcs[i]][currentSinr_ind] = tempSinrPerMcs[mcs[i]][currentSinr_ind]+currentSinr; //accumulated Prb
				System.out.println(currentMcs + " " +tempSinrPerMcs[mcs[i]-1][counter_ind] + " " +  tempSinrPerMcs[mcs[i]][currentSinr_ind]);
				//reset values
				currentSinr = 0;
				counter = 0;
				currentMcs = mcs[i];
			}
		}
		for (int j=0;j<tempSinrPerMcs.length;j++){ 
			
			if(tempSinrPerMcs[j][counter_ind] != 0){ //counter index mustn't be 0, division by zero error
				sinrPerMcs[j] = ((float) tempSinrPerMcs[j][currentSinr_ind]/tempSinrPerMcs[j][counter_ind]);//divide by thousand, we get Mbits/s/SINR
			}
		}
		Print.array(sinrPerMcs);
		return sinrPerMcs;
	}
	//IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
	private static int[] init(int[] arr){
		for(int i=0;i<arr.length;i++){
				arr[i] = 0;
		}
		return arr;
	}
	private static float[] init(float[] arr){
		for(int i=0;i<arr.length;i++){
				arr[i] = 0;
		}
		return arr;
	}
	private static int[][] init(int[][] arr){
		for(int i=0;i<arr.length;i++){
			for(int j=0;j<arr[0].length;j++){
				arr[i][j] = 0;
			}
		}
		return arr;
	}
	private static float[][] init(float[][] arr){
		for(int i=0;i<arr.length;i++){
			for(int j=0;j<arr[0].length;j++){
				arr[i][j] = 0;
			}
		}
		return arr;
	}
	public static int[] addArrays(int[] arr1, int[] arr2){
		int[] outArr = new int[Math.min(arr1.length, arr2.length)];
		for(int i = 0; i < outArr.length; i++){
			outArr[i] = arr1[i]+arr2[i];
		}
		return outArr;
	}
	private static int findCloseValFrInd(int[] prb,int list_index){
		int bandWidth = 0;
		int inc = list_index;
		int dec = list_index;
		while(true){
				if(prb[dec] != -1337){
					bandWidth = prb[dec];
					break;
				} else if (prb[inc] != -1337){
					bandWidth = prb[inc];
					break;
				}
				if(dec > 0){
					dec--;
				}
				if(inc<prb.length){
					inc++;
				}
		}
		//System.out.println(bandWidth+ " bandwidth");
		return bandWidth;
	}
	
	//tbs is bits sending per ms, divide it by thousand to get it in Mbits/s
	public static float[] tbs2Mbps(float[] tbs){
		float[] bps = new float[tbs.length];
		for(int i=0;i<tbs.length;i++)
			bps[i] = tbs[i]/1000;
		
		return bps;
	}
	
	// 1 prb is 180 khz
	public static float[] prb2hz(float[] prb){
		float[] hz = new float[prb.length];
		for(int i=0;i<prb.length;i++)
			hz[i] = prb[i]*180000;
		
		return prb;
	}
	
	//divide the average Mbit/s/SINR to the average of allocated bandwidth/SINR
	public static float[] spectralEfficiencyPerSINR(float[] bpsPerSINR, float[] hzPerSINR){
		float[] specEff = new float[hzPerSINR.length];
		for(int i=0;i<hzPerSINR.length;i++){
			specEff[i] = bpsPerSINR[i]/hzPerSINR[i];
		}
		return specEff;
	}
}
