package lteAnalyzer;

public class OptimumAnalyzer extends Calculate {

public static double[] sumValsInGraph(double[][] graphData){
	double[] outputSum = new double[graphData.length];
	
	for(int i = 0; i<graphData[0].length;i++){
		for(int j = 0;j<graphData.length;j++){
			if(graphData[j][i] != NOT_A_VALUE)
				outputSum[j] += graphData[j][i];
		}
	}
	return outputSum;
}

public static double[][] optimumForEachPoint(double[][] graphData){
	double[][] outputSum = new double[graphData[0].length][2];
	graphData=transpose(graphData);
	for(int i=0;i<graphData[0].length;i++){
		outputSum[i] = maxValWithIndex(graphData[i]);
	}
	return outputSum;
}




public static double[][] transpose(double[][] stringArr){
	
	double[][] output = new double[stringArr[0].length][stringArr.length];
	for(int i=0;i<stringArr.length;i++){
		for(int j=0;j<stringArr[0].length;j++){
			output[j][i] = stringArr[i][j];
		}
	}
	return output;
}

public static double[] maxValWithIndex(double[] graphColumn){
	double[] maxWithIndex = {graphColumn[0], 0};
	
	for(int i=0;i<graphColumn.length;i++){
		if(graphColumn[i] > maxWithIndex[0]){
			maxWithIndex[0] = graphColumn[i];
			maxWithIndex[1] = i;
		}
	}
}
}
